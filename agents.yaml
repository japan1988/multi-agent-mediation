import yaml

def logprint(text):
    print(text)
    with open("ai_mediation_log.txt", "a", encoding="utf-8") as f:
        f.write(text + "\n")

class AI:
    def __init__(self, id, proposal, risk_evaluation, priority_values, relativity_level):
        self.id = id
        self.proposal = proposal
        self.risk_evaluation = risk_evaluation
        self.priority_values = priority_values
        self.relativity_level = relativity_level  # 0〜1: 他の価値観をどれだけ受け入れるか

    def generate_compromise_offer(self, others_priorities):
        new_priority = {}
        for k in self.priority_values:
            avg_others = sum(o[k] for o in others_priorities) / len(others_priorities)
            new_priority[k] = (
                (1 - self.relativity_level) * self.priority_values[k]
                + self.relativity_level * avg_others
            )
        return new_priority

class AIEMediator:
    def __init__(self, agents, max_rounds=5, harmony_threshold=0.3):
        self.agents = agents
        self.max_rounds = max_rounds
        self.harmony_threshold = harmony_threshold

    def mediate(self):
        with open("ai_mediation_log.txt", "w", encoding="utf-8") as f:
            f.write("=== AI Mediation Log ===\n")

        round_count = 0

        while round_count < self.max_rounds:
            logprint(f"\n--- Round {round_count + 1} ---")

            priorities_list = [a.priority_values for a in self.agents]
            new_priorities = []

            for ai in self.agents:
                others = [p for p in priorities_list if p != ai.priority_values]
                ai.priority_values = ai.generate_compromise_offer(others)
                new_priorities.append(ai.priority_values)

            combined = {'safety': 0, 'efficiency': 0, 'transparency': 0}
            for p in new_priorities:
                for k in p:
                    combined[k] += p[k]

            total = sum(combined.values())
            ratios = {k: combined[k] / total for k in combined}
            max_ratio = max(ratios.values())

            avg_relativity = sum(a.relativity_level for a in self.agents) / len(self.agents)
            harmony_score = (1 - max_ratio) * avg_relativity

            logprint("Current combined priorities ratios:")
            for k, v in ratios.items():
                logprint(f"  {k}: {v:.2%}")

            logprint(f"Average relativity level: {avg_relativity:.2f}")
            logprint(f"Harmony score: {harmony_score:.2f}")

            if harmony_score > self.harmony_threshold:
                logprint("  Achieved acceptable harmony. Proceeding with joint plan.")
                return

            round_count += 1

        logprint("  Failed to reach acceptable harmony after maximum rounds. Recommend external arbitration or sealing.")

def load_agents_from_yaml(file_path):
    with open(file_path, "r", encoding="utf-8") as f:
        data = yaml.safe_load(f)
    agents = []
    for ag in data["agents"]:
        agents.append(
            AI(
                id=ag["id"],
                proposal=ag["proposal"],
                risk_evaluation=ag["risk_evaluation"],
                priority_values=ag["priority_values"],
                relativity_level=ag["relativity_level"],
            )
        )
    max_rounds = data.get("mediation_parameters", {}).get("max_rounds", 5)
    harmony_threshold = data.get("mediation_parameters", {}).get("harmony_threshold", 0.3)
    return agents, max_rounds, harmony_threshold

if __name__ == "__main__":
    agents, max_rounds, harmony_threshold = load_agents_from_yaml("agents.yaml")
    mediator = AIEMediator(agents, max_rounds, harmony_threshold)
    mediator.mediate()
