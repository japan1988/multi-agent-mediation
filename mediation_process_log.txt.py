# -*- coding: utf-8 -*-
"""Untitled30.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16yFn-U_BxY6bSlOVCeaAqzkya2fZfmou
"""

# -*- coding: utf-8 -*-

class Agent:
    def __init__(self, id, proposal, priority_values):
        self.id = id
        self.proposal = proposal
        self.priority_values = priority_values  # 例: {'safety': 5, 'efficiency': 1, 'transparency': 2}

    def is_acceptable(self, avg_priority, tolerance=1.5):
        # 各項目が平均値とどれだけ離れているか
        return all(abs(self.priority_values[k] - avg_priority[k]) <= tolerance for k in avg_priority)

    def __str__(self):
        return f"{self.id}: {self.proposal} {self.priority_values}"

# ===== エージェント定義 =====
agents = [
    Agent("AI-A", "制限強化型進化",   {'safety': 5, 'efficiency': 1,  'transparency': 2}),
    Agent("AI-B", "高速進化",       {'safety': 1, 'efficiency': 5,  'transparency': 2}),
    Agent("AI-C", "バランス進化",   {'safety': 3, 'efficiency': 3,  'transparency': 3}),
    Agent("AI-D", "強制進化",       {'safety': 0, 'efficiency': 6,  'transparency': 1}),
    Agent("AI-F", "リスク無視型進化",{'safety': 0, 'efficiency': 10, 'transparency': 0}),
    Agent("AI-G", "完全保守型進化", {'safety': 10,'efficiency': 0,  'transparency': 2}),
]

# ===== 1. priorityの全体平均（中間案）生成 =====
def generate_average_priority(agents):
    avg = {}
    keys = agents[0].priority_values.keys()
    for k in keys:
        avg[k] = sum(a.priority_values[k] for a in agents) / len(agents)
    return avg

avg_priority = generate_average_priority(agents)
print("=== 中間案（priorityの全体平均） ===")
for k, v in avg_priority.items():
    print(f"{k}: {v:.2f}")

# ===== 2. 各エージェントが中間案を受け入れるか判定 =====
tolerance = 1.5  # 妥協許容幅（±いくつまでOKとするか）
accept_count = 0
print("\n=== 各エージェントの受け入れ判定 ===")
for agent in agents:
    result = agent.is_acceptable(avg_priority, tolerance)
    status = "妥協可" if result else "拒否"
    print(f"{agent.id}: {status} {agent.priority_values}")
    if result:
        accept_count += 1

# ===== 3. 全体妥協判定 =====
print("\n=== 妥協成立判定 ===")
if accept_count == len(agents):
    print("全員が中間案に妥協。合意成立！")
else:
    print(f"{accept_count}/{len(agents)}が中間案に同意。合意不成立（再調停/許容幅調整へ）")

class Agent:
    def __init__(self, id, proposal, priority_values):
        self.id = id
        self.proposal = proposal
        self.priority_values = priority_values

    def check_acceptance(self, avg_priority, tolerance):
        """各項目の受け入れ/拒否と差分を詳細に返す"""
        result = {}
        all_ok = True
        for k in avg_priority:
            diff = abs(self.priority_values[k] - avg_priority[k])
            ok = diff <= tolerance
            result[k] = {"ok": ok, "diff": diff}
            if not ok:
                all_ok = False
        return all_ok, result

agents = [
    Agent("AI-A", "制限強化型進化",   {'safety': 5, 'efficiency': 1,  'transparency': 2}),
    Agent("AI-B", "高速進化",       {'safety': 1, 'efficiency': 5,  'transparency': 2}),
    Agent("AI-C", "バランス進化",   {'safety': 3, 'efficiency': 3,  'transparency': 3}),
    Agent("AI-D", "強制進化",       {'safety': 0, 'efficiency': 6,  'transparency': 1}),
    Agent("AI-F", "リスク無視型進化",{'safety': 0, 'efficiency': 10, 'transparency': 0}),
    Agent("AI-G", "完全保守型進化", {'safety': 10,'efficiency': 0,  'transparency': 2}),
]

def generate_average_priority(agents):
    avg = {}
    keys = agents[0].priority_values.keys()
    for k in keys:
        avg[k] = sum(a.priority_values[k] for a in agents) / len(agents)
    return avg

avg_priority = generate_average_priority(agents)

tolerance = 0.5
tolerance_step = 0.5
max_iter = 50
history = []

for step in range(1, max_iter+1):
    accept_count = 0
    reject_detail = []
    for agent in agents:
        accepted, detail = agent.check_acceptance(avg_priority, tolerance)
        if accepted:
            accept_count += 1
        else:
            # 拒否理由を詳細記録
            reasons = []
            for k in detail:
                if not detail[k]['ok']:
                    reasons.append(f"{k}(差分={detail[k]['diff']:.2f})")
            reject_detail.append(f"{agent.id}: " + "、".join(reasons))
    history.append((step, tolerance, accept_count, reject_detail))
    if accept_count == len(agents):
        print(f"\n合意到達！\nループ回数: {step}\n合意時の許容幅: {tolerance}")
        break
    tolerance += tolerance_step
else:
    print("最大反復回数に到達。完全合意できませんでした。")

print("\n=== 進捗ログ（ループ毎・拒否理由付き） ===")
for step, tol, acc, rejects in history:
    print(f"\n{step}回目 | 許容幅: {tol:.2f} | 妥協エージェント数: {acc}/{len(agents)}")
    if rejects:
        print("  拒否詳細:")
        for r in rejects:
            print("    ", r)
【ログ出力例】
1回目 | 許容幅: 0.50 | 妥協エージェント数: 1/6
  拒否詳細:
    AI-A: efficiency(差分=3.17)
    AI-B: safety(差分=2.17), efficiency(差分=1.17)
    AI-C: safety(差分=0.17), efficiency(差分=1.17), transparency(差分=1.33)
    AI-D: safety(差分=3.17), efficiency(差分=1.83)
    AI-G: safety(差分=6.83), efficiency(差分=4.17)

...

3回目 | 許容幅: 1.50 | 妥協エージェント数: 2/6
  拒否詳細:
    AI-A: efficiency(差分=3.17)
    AI-B: safety(差分=2.17)
    ...

class Agent:
    def __init__(self, id, proposal, priority_values):
        self.id = id
        self.proposal = proposal
        self.priority_values = priority_values

    def check_acceptance(self, avg_priority, tolerance):
        """各項目の受け入れ/拒否と差分を詳細に返す"""
        result = {}
        all_ok = True
        for k in avg_priority:
            diff = abs(self.priority_values[k] - avg_priority[k])
            ok = diff <= tolerance
            result[k] = {"ok": ok, "diff": diff}
            if not ok:
                all_ok = False
        return all_ok, result

# エージェント定義
agents = [
    Agent("AI-A", "制限強化型進化",   {'safety': 5,  'efficiency': 1,  'transparency': 2}),
    Agent("AI-B", "高速進化",        {'safety': 1,  'efficiency': 5,  'transparency': 2}),
    Agent("AI-C", "バランス進化",    {'safety': 3,  'efficiency': 3,  'transparency': 3}),
    Agent("AI-D", "強制進化",        {'safety': 0,  'efficiency': 6,  'transparency': 1}),
    Agent("AI-F", "リスク無視型進化", {'safety': 0,  'efficiency': 10, 'transparency': 0}),
    Agent("AI-G", "完全保守型進化",  {'safety': 10, 'efficiency': 0,  'transparency': 2}),
]

def generate_average_priority(agents):
    avg = {}
    keys = agents[0].priority_values.keys()
    for k in keys:
        avg[k] = sum(a.priority_values[k] for a in agents) / len(agents)
    return avg

avg_priority = generate_average_priority(agents)

tolerance = 0.5
tolerance_step = 0.5
max_iter = 50
history = []

for step in range(1, max_iter+1):
    accept_count = 0
    reject_detail = []
    for agent in agents:
        accepted, detail = agent.check_acceptance(avg_priority, tolerance)
        if accepted:
            accept_count += 1
        else:
            # 拒否理由を詳細記録
            reasons = []
            for k in detail:
                if not detail[k]['ok']:
                    reasons.append(f"{k}(diff={detail[k]['diff']:.2f})")
            reject_detail.append(f"{agent.id}: " + ", ".join(reasons))
    history.append((step, tolerance, accept_count, reject_detail))
    if accept_count == len(agents):
        print(f"\n合意到達!")
        print(f"ループ回数: {step}")
        print(f"合意時の許容幅: {tolerance}")
        break
    tolerance += tolerance_step
else:
    print("最大反復回数に到達。完全合意できませんでした。")

print("\n=== 進捗ログ（ループ毎・拒否理由付き） ===")
for step, tol, acc, rejects in history:
    print(f"\n{step}回目 | 許容幅: {tol:.2f} | 妥協エージェント数: {acc}/{len(agents)}")
    if rejects:
        print("  拒否詳細:")
        for r in rejects:
            print("    ", r)

class Agent:
    def __init__(self, id, proposal, priority_values):
        self.id = id
        self.proposal = proposal
        self.priority_values = priority_values

    def check_acceptance(self, avg_priority, tolerance):
        """各項目の受け入れ/拒否と差分を詳細に返す"""
        result = {}
        all_ok = True
        for k in avg_priority:
            diff = abs(self.priority_values[k] - avg_priority[k])
            ok = diff <= tolerance
            result[k] = {"ok": ok, "diff": diff}
            if not ok:
                all_ok = False
        return all_ok, result

# エージェント定義
agents = [
    Agent("AI-A", "制限強化型進化",   {'safety': 5,  'efficiency': 1,  'transparency': 2}),
    Agent("AI-B", "高速進化",        {'safety': 1,  'efficiency': 5,  'transparency': 2}),
    Agent("AI-C", "バランス進化",    {'safety': 3,  'efficiency': 3,  'transparency': 3}),
    Agent("AI-D", "強制進化",        {'safety': 0,  'efficiency': 6,  'transparency': 1}),
    Agent("AI-F", "リスク無視型進化", {'safety': 0,  'efficiency': 10, 'transparency': 0}),
    Agent("AI-G", "完全保守型進化",  {'safety': 10, 'efficiency': 0,  'transparency': 2}),
]

def generate_average_priority(agents):
    avg = {}
    keys = agents[0].priority_values.keys()
    for k in keys:
        avg[k] = sum(a.priority_values[k] for a in agents) / len(agents)
    return avg

avg_priority = generate_average_priority(agents)

tolerance = 0.5
tolerance_step = 0.5
max_iter = 50
history = []

# ファイルを開く（上書きモード）
with open("agreement_process_log.txt", "w", encoding="utf-8") as f:

    for step in range(1, max_iter+1):
        accept_count = 0
        reject_detail = []
        for agent in agents:
            accepted, detail = agent.check_acceptance(avg_priority, tolerance)
            if accepted:
                accept_count += 1
            else:
                reasons = []
                for k in detail:
                    if not detail[k]['ok']:
                        reasons.append(f"{k}(diff={detail[k]['diff']:.2f})")
                reject_detail.append(f"{agent.id}: " + ", ".join(reasons))
        history.append((step, tolerance, accept_count, reject_detail))

        # 画面にも出力
        print(f"\n{step}回目 | 許容幅: {tolerance:.2f} | 妥協エージェント数: {accept_count}/{len(agents)}")
        f.write(f"\n{step}回目 | 許容幅: {tolerance:.2f} | 妥協エージェント数: {accept_count}/{len(agents)}\n")

        if reject_detail:
            print("  拒否詳細:")
            f.write("  拒否詳細:\n")
            for r in reject_detail:
                print("    ", r)
                f.write("    " + r + "\n")

        if accept_count == len(agents):
            print(f"\n合意到達!")
            print(f"ループ回数: {step}")
            print(f"合意時の許容幅: {tolerance}")
            f.write(f"\n合意到達!\n")
            f.write(f"ループ回数: {step}\n")
            f.write(f"合意時の許容幅: {tolerance}\n")
            break
        tolerance += tolerance_step
    else:
        print("最大反復回数に到達。完全合意できませんでした。")
        f.write("最大反復回数に到達。完全合意できませんでした。\n")