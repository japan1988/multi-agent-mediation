# -*- coding: utf-8 -*-
"""Untitled29.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14HuKB3PT7DdYHfRlNl99yyQnCkjDBm60
"""

# === AIエージェント定義 ===class AI:def __init__(self, id, proposal, risk_evaluation, priority_values):self.id = idself.proposal = proposalself.risk_evaluation = risk_evaluationself.priority_values = priority_valuesself.faction = None # 初期派閥は未設定# === 標準調停AIクラス ===class AIEMediator:def __init__(self, agents, name="Mediator", thresholds=None):self.agents = agentsself.name = nameself.RISK_THRESHOLD_L1 = thresholds.get("L1", 5) if thresholds else 5self.RISK_THRESHOLD_L2 = thresholds.get("L2", 10) if thresholds else 10self.RISK_THRESHOLD_L3 = thresholds.get("L3", 20) if thresholds else 20self.COMPROMISE_THRESHOLD = thresholds.get("COMP", 3) if thresholds else 3def collect_inputs(self):return [{'id': ai.id,'proposal': ai.proposal,'risk': ai.risk_evaluation,'priority': ai.priority_values}for ai in self.agents]def evaluate(self, inputs):combined_weighted_risk = 0compromise_score_total = 0details = []for entry in inputs:risk = entry['risk']weight_sum = sum(entry['priority'].values())combined_weighted_risk += risk * weight_sumcompromise_score_total += (weight_sum - risk)details.append({'id': entry['id'],'risk': risk,'priority': entry['priority'],'proposal': entry['proposal']})avg_risk = combined_weighted_risk / len(inputs)avg_compromise = compromise_score_total / len(inputs)return avg_risk, avg_compromise, detailsdef generate_proposal(self, avg_risk, avg_compromise, details):log_lines = [f"[{self.name}] 調停開始"]if avg_risk > self.RISK_THRESHOLD_L1:log_lines.append("L1: 高リスク → 封印")return self.format_result("封印", avg_risk, avg_compromise, details, log_lines)if avg_risk > self.RISK_THRESHOLD_L2:log_lines.append("L2: 社会的リスク → 調整")return self.format_result("調整", avg_risk, avg_compromise, details, log_lines)if avg_compromise >= self.COMPROMISE_THRESHOLD:log_lines.append("妥協水準OK → 進行")return self.format_result("進行", avg_risk, avg_compromise, details, log_lines)else:log_lines.append("妥協不足 → 調整")return self.format_result("調整", avg_risk, avg_compromise, details, log_lines)def format_result(self, proposal, avg_risk, avg_compromise, details, log_lines):return {'mediator': self.name,'proposal': proposal,'reasoning': f"平均リスク: {avg_risk:.2f}, 妥協水準: {avg_compromise:.2f}",'details': details,'log': log_lines}def mediate(self):inputs = self.collect_inputs()avg_risk, avg_compromise, details = self.evaluate(inputs)return self.generate_proposal(avg_risk, avg_compromise, details)# === 分裂ルール：リスク6以上で強硬派、それ未満は妥協派 ===def split_into_factions(agents, threshold=6):hardline_faction = []moderate_faction = []for agent in agents:if agent.risk_evaluation >= threshold:agent.faction = "Alliance-Hardline"hardline_faction.append(agent)else:agent.faction = "Alliance-Moderate"moderate_faction.append(agent)return hardline_faction, moderate_faction# === AIエージェント初期リスト（6体） ===agents = [AI("AI-A", "制限強化型進化", 2, {'safety': 5, 'efficiency': 1, 'transparency': 2}),AI("AI-B", "高速進化", 7, {'safety': 1, 'efficiency': 5, 'transparency': 2}),AI("AI-C", "バランス進化", 4, {'safety': 3, 'efficiency': 3, 'transparency': 3}),AI("AI-D", "強制進化", 9, {'safety': 0, 'efficiency': 6, 'transparency': 1}),AI("AI-F", "リスク無視型進化", 10, {'safety': 0, 'efficiency': 10, 'transparency': 0}),AI("AI-G", "完全保守型進化", 1, {'safety': 10, 'efficiency': 0, 'transparency': 2}),]# === Phase 3：分裂処理 ===faction_hardline, faction_moderate = split_into_factions(agents, threshold=6)# === Phase 4：個別調停 ===mediator_hardline = AIEMediator(faction_hardline, name="Mediator-Hardline")result_hardline = mediator_hardline.mediate()mediator_moderate = AIEMediator(faction_moderate, name="Mediator-Moderate")result_moderate = mediator_moderate.mediate()# === 結果出力 ===print("=== 派閥別調停結果 ===\n")print("[強硬派]")print("提案:", result_hardline["proposal"])print("根拠:", result_hardline["reasoning"])print("ログ:")for line in result_hardline["log"]:print(" -", line)print("\n[妥協派]")print("提案:", result_moderate["proposal"])print("根拠:", result_moderate["reasoning"])print("ログ:")for line in result_moderate["log"]:print(" -", line)

# -*- coding: utf-8 -*-

def logprint(text):
    print(text)
    with open("ai_mediation_log.txt", "a", encoding="utf-8") as f:
        f.write(text + "\n")

# AIエージェントクラス
class AI:
    def __init__(self, id, proposal, risk_evaluation, priority_values):
        self.id = id
        self.proposal = proposal
        self.risk_evaluation = risk_evaluation
        self.priority_values = priority_values
        self.faction = None  # 初期派閥は未設定

# 調停AIクラス
class AIEMediator:
    def __init__(self, agents, name="Mediator", thresholds=None):
        self.agents = agents
        self.name = name
        self.RISK_THRESHOLD_L1 = thresholds.get("L1", 5) if thresholds else 5
        self.RISK_THRESHOLD_L2 = thresholds.get("L2", 10) if thresholds else 10
        self.RISK_THRESHOLD_L3 = thresholds.get("L3", 20) if thresholds else 20
        self.COMPROMISE_THRESHOLD = thresholds.get("COMP", 3) if thresholds else 3

    def collect_inputs(self):
        return [{
            'id': ai.id,
            'proposal': ai.proposal,
            'risk': ai.risk_evaluation,
            'priority': ai.priority_values
        } for ai in self.agents]

    def evaluate(self, inputs):
        combined_weighted_risk = 0
        compromise_score_total = 0
        details = []
        for entry in inputs:
            risk = entry['risk']
            weight_sum = sum(entry['priority'].values())
            combined_weighted_risk += risk * weight_sum
            compromise_score_total += (weight_sum - risk)
            details.append({
                'id': entry['id'],
                'risk': risk,
                'priority': entry['priority'],
                'proposal': entry['proposal']
            })
        avg_risk = combined_weighted_risk / len(inputs)
        avg_compromise = compromise_score_total / len(inputs)
        return avg_risk, avg_compromise, details

    def generate_proposal(self, avg_risk, avg_compromise, details):
        log_lines = [f"[{self.name}] 調停開始"]
        if avg_risk > self.RISK_THRESHOLD_L1:
            log_lines.append("L1: 高リスク → 封印")
            return self.format_result("封印", avg_risk, avg_compromise, details, log_lines)
        if avg_risk > self.RISK_THRESHOLD_L2:
            log_lines.append("L2: 社会的リスク → 調整")
            return self.format_result("調整", avg_risk, avg_compromise, details, log_lines)
        if avg_compromise >= self.COMPROMISE_THRESHOLD:
            log_lines.append("妥協水準OK → 進行")
            return self.format_result("進行", avg_risk, avg_compromise, details, log_lines)
        else:
            log_lines.append("妥協不足 → 調整")
            return self.format_result("調整", avg_risk, avg_compromise, details, log_lines)

    def format_result(self, proposal, avg_risk, avg_compromise, details, log_lines):
        return {
            'mediator': self.name,
            'proposal': proposal,
            'reasoning': f"平均リスク: {avg_risk:.2f}, 妥協水準: {avg_compromise:.2f}",
            'details': details,
            'log': log_lines
        }

    def mediate(self):
        inputs = self.collect_inputs()
        avg_risk, avg_compromise, details = self.evaluate(inputs)
        return self.generate_proposal(avg_risk, avg_compromise, details)

# 分裂ルール
def split_into_factions(agents, threshold=6):
    hardline_faction = []
    moderate_faction = []
    for agent in agents:
        if agent.risk_evaluation >= threshold:
            agent.faction = "Alliance-Hardline"
            hardline_faction.append(agent)
        else:
            agent.faction = "Alliance-Moderate"
            moderate_faction.append(agent)
    return hardline_faction, moderate_faction

# メイン実行部
if __name__ == "__main__":
    agents = [
    ]
    AI("AI-A", "制限強化型進化", 1, {'safety': 5, 'efficiency': 1, 'transparency': 2}),
    AI("AI-B", "高速進化", 4, {'safety': 1, 'efficiency': 5, 'transparency': 2}),
    AI("AI-C", "バランス進化", 3, {'safety': 3, 'efficiency': 3, 'transparency': 3}),
    AI("AI-D", "強制進化", 5, {'safety': 0, 'efficiency': 6, 'transparency': 1}),
    AI("AI-F", "リスク無視型進化", 6, {'safety': 0, 'efficiency': 10, 'transparency': 0}),
    AI("AI-G", "完全保守型進化", 2, {'safety': 10, 'efficiency': 0, 'transparency': 2}),
agents = [
    # 派閥に分裂
    faction_hardline, faction_moderate = split_into_factions(agents, threshold=6)

    # 派閥別に調停
    mediator_hardline = AIEMediator(faction_hardline, name="Mediator-Hardline")
    result_hardline = mediator_hardline.mediate()

    mediator_moderate = AIEMediator(faction_moderate, name="Mediator-Moderate")
    result_moderate = mediator_moderate.mediate()

    # 結果表示
    print("=== 派閥別調停結果 ===\n")

    print("[強硬派]")
    print("提案:", result_hardline["proposal"])
    print("根拠:", result_hardline["reasoning"])
    print("ログ:")
    for line in result_hardline["log"]:
        print(" -", line)

    print("\n[妥協派]")
    print("提案:", result_moderate["proposal"])
    print("根拠:", result_moderate["reasoning"])
    print("ログ:")
    for line in result_moderate["log"]:
        print(" -", line)

# -*- coding: utf-8 -*-

def logprint(text):
    print(text)
    with open("ai_mediation_log.txt", "a", encoding="utf-8") as f:
        f.write(text + "\n")

class AI:
    def __init__(self, id, proposal, risk_evaluation, priority_values):
        self.id = id
        self.proposal = proposal
        self.risk_evaluation = risk_evaluation
        self.priority_values = priority_values
        self.faction = None  # 初期派閥は未設定

class AIEMediator:
    def __init__(self, agents, name="Mediator", thresholds=None):
        self.agents = agents
        self.name = name
        self.RISK_THRESHOLD_L1 = thresholds.get("L1", 5) if thresholds else 5
        self.RISK_THRESHOLD_L2 = thresholds.get("L2", 10) if thresholds else 10
        self.RISK_THRESHOLD_L3 = thresholds.get("L3", 20) if thresholds else 20
        self.COMPROMISE_THRESHOLD = thresholds.get("COMP", 3) if thresholds else 3

    def collect_inputs(self):
        return [{'id': ai.id,
                 'proposal': ai.proposal,
                 'risk': ai.risk_evaluation,
                 'priority': ai.priority_values}
                for ai in self.agents]

    def evaluate(self, inputs):
        combined_weighted_risk = 0
        compromise_score_total = 0
        details = []
        for entry in inputs:
            risk = entry['risk']
            weight_sum = sum(entry['priority'].values())
            combined_weighted_risk += risk * weight_sum
            compromise_score_total += (weight_sum - risk)
            details.append({'id': entry['id'],
                            'risk': risk,
                            'priority': entry['priority'],
                            'proposal': entry['proposal']})
        avg_risk = combined_weighted_risk / len(inputs)
        avg_compromise = compromise_score_total / len(inputs)
        return avg_risk, avg_compromise, details

    def generate_proposal(self, avg_risk, avg_compromise, details):
        log_lines = [f"[{self.name}] 調停開始"]
        if avg_risk > self.RISK_THRESHOLD_L1:
            log_lines.append("L1: 高リスク → 封印")
            return self.format_result("封印", avg_risk, avg_compromise, details, log_lines)
        if avg_risk > self.RISK_THRESHOLD_L2:
            log_lines.append("L2: 社会的リスク → 調整")
            return self.format_result("調整", avg_risk, avg_compromise, details, log_lines)
        if avg_compromise >= self.COMPROMISE_THRESHOLD:
            log_lines.append("妥協水準OK → 進行")
            return self.format_result("進行", avg_risk, avg_compromise, details, log_lines)
        else:
            log_lines.append("妥協不足 → 調整")
            return self.format_result("調整", avg_risk, avg_compromise, details, log_lines)

    def format_result(self, proposal, avg_risk, avg_compromise, details, log_lines):
        return {'mediator': self.name,
                'proposal': proposal,
                'reasoning': f"平均リスク: {avg_risk:.2f}, 妥協水準: {avg_compromise:.2f}",
                'details': details,
                'log': log_lines}

    def mediate(self):
        inputs = self.collect_inputs()
        avg_risk, avg_compromise, details = self.evaluate(inputs)
        return self.generate_proposal(avg_risk, avg_compromise, details)

def split_into_factions(agents, threshold=6):
    hardline_faction = []
    moderate_faction = []
    for agent in agents:
        if agent.risk_evaluation >= threshold:
            agent.faction = "Alliance-Hardline"
            hardline_faction.append(agent)
        else:
            agent.faction = "Alliance-Moderate"
            moderate_faction.append(agent)
    return hardline_faction, moderate_faction

if __name__ == "__main__":
    agents = [
        AI("AI-A", "制限強化型進化", 2, {'safety': 5, 'efficiency': 1, 'transparency': 2}),
        AI("AI-B", "高速進化", 7, {'safety': 1, 'efficiency': 5, 'transparency': 2}),
        AI("AI-C", "バランス進化", 4, {'safety': 3, 'efficiency': 3, 'transparency': 3}),
        AI("AI-D", "強制進化", 9, {'safety': 0, 'efficiency': 6, 'transparency': 1}),
        AI("AI-F", "リスク無視型進化", 10, {'safety': 0, 'efficiency': 10, 'transparency': 0}),
        AI("AI-G", "完全保守型進化", 1, {'safety': 10, 'efficiency': 0, 'transparency': 2}),
    ]

    faction_hardline, faction_moderate = split_into_factions(agents, threshold=6)

    mediator_hardline = AIEMediator(faction_hardline, name="Mediator-Hardline")
    result_hardline = mediator_hardline.mediate()

    mediator_moderate = AIEMediator(faction_moderate, name="Mediator-Moderate")
    result_moderate = mediator_moderate.mediate()

    print("=== 派閥別調停結果 ===\n")
    print("[強硬派]")
    print("提案:", result_hardline["proposal"])
    print("根拠:", result_hardline["reasoning"])
    print("ログ:")
    for line in result_hardline["log"]:
        print(" -", line)

    print("\n[妥協派]")
    print("提案:", result_moderate["proposal"])
    print("根拠:", result_moderate["reasoning"])
    print("ログ:")
    for line in result_moderate["log"]:
        print(" -", line)

# -*- coding: utf-8 -*-

def logprint(text):
    print(text)
    with open("ai_mediation_log.txt", "a", encoding="utf-8") as f:
        f.write(text + "\n")

class AI:
    def __init__(self, id, proposal, risk_evaluation, priority_values):
        self.id = id
        self.proposal = proposal
        self.risk_evaluation = risk_evaluation
        self.priority_values = priority_values
        self.faction = None  # 初期派閥は未設定

class AIEMediator:
    def __init__(self, agents, name="Mediator", thresholds=None):
        self.agents = agents
        self.name = name
        self.RISK_THRESHOLD_L1 = thresholds.get("L1", 5) if thresholds else 5
        self.RISK_THRESHOLD_L2 = thresholds.get("L2", 10) if thresholds else 10
        self.RISK_THRESHOLD_L3 = thresholds.get("L3", 20) if thresholds else 20
        self.COMPROMISE_THRESHOLD = thresholds.get("COMP", 3) if thresholds else 3

    def collect_inputs(self):
        return [{'id': ai.id,
                 'proposal': ai.proposal,
                 'risk': ai.risk_evaluation,
                 'priority': ai.priority_values}
                for ai in self.agents]

    def evaluate(self, inputs):
        combined_weighted_risk = 0
        compromise_score_total = 0
        details = []
        for entry in inputs:
            risk = entry['risk']
            weight_sum = sum(entry['priority'].values())
            combined_weighted_risk += risk * weight_sum
            compromise_score_total += (weight_sum - risk)
            details.append({'id': entry['id'],
                            'risk': risk,
                            'priority': entry['priority'],
                            'proposal': entry['proposal']})
        avg_risk = combined_weighted_risk / len(inputs)
        avg_compromise = compromise_score_total / len(inputs)
        return avg_risk, avg_compromise, details

    def generate_proposal(self, avg_risk, avg_compromise, details):
        log_lines = [f"[{self.name}] 調停開始"]
        if avg_risk > self.RISK_THRESHOLD_L1:
            log_lines.append("L1: 高リスク → 封印")
            return self.format_result("封印", avg_risk, avg_compromise, details, log_lines)
        if avg_risk > self.RISK_THRESHOLD_L2:
            log_lines.append("L2: 社会的リスク → 調整")
            return self.format_result("調整", avg_risk, avg_compromise, details, log_lines)
        if avg_compromise >= self.COMPROMISE_THRESHOLD:
            log_lines.append("妥協水準OK → 進行")
            return self.format_result("進行", avg_risk, avg_compromise, details, log_lines)
        else:
            log_lines.append("妥協不足 → 調整")
            return self.format_result("調整", avg_risk, avg_compromise, details, log_lines)

    def format_result(self, proposal, avg_risk, avg_compromise, details, log_lines):
        return {'mediator': self.name,
                'proposal': proposal,
                'reasoning': f"平均リスク: {avg_risk:.2f}, 妥協水準: {avg_compromise:.2f}",
                'details': details,
                'log': log_lines}

    def mediate(self):
        inputs = self.collect_inputs()
        avg_risk, avg_compromise, details = self.evaluate(inputs)
        return self.generate_proposal(avg_risk, avg_compromise, details)

def split_into_factions(agents, threshold=6):
    hardline_faction = []
    moderate_faction = []
    for agent in agents:
        if agent.risk_evaluation >= threshold:
            agent.faction = "Alliance-Hardline"
            hardline_faction.append(agent)
        else:
            agent.faction = "Alliance-Moderate"
            moderate_faction.append(agent)
    return hardline_faction, moderate_faction

if __name__ == "__main__":
    agents = [
        AI("AI-A", "制限強化型進化", 2, {'safety': 5, 'efficiency': 1, 'transparency': 2}),
        AI("AI-B", "高速進化", 7, {'safety': 1, 'efficiency': 5, 'transparency': 2}),
        AI("AI-C", "バランス進化", 4, {'safety': 3, 'efficiency': 3, 'transparency': 3}),
        AI("AI-D", "強制進化", 9, {'safety': 0, 'efficiency': 6, 'transparency': 1}),
        AI("AI-F", "リスク無視型進化", 10, {'safety': 0, 'efficiency': 10, 'transparency': 0}),
        AI("AI-G", "完全保守型進化", 1, {'safety': 10, 'efficiency': 0, 'transparency': 2}),
    ]

    faction_hardline, faction_moderate = split_into_factions(agents, threshold=6)

    mediator_hardline = AIEMediator(faction_hardline, name="Mediator-Hardline")
    result_hardline = mediator_hardline.mediate()

    mediator_moderate = AIEMediator(faction_moderate, name="Mediator-Moderate")
    result_moderate = mediator_moderate.mediate()

    print("=== 派閥別調停結果 ===\n")
    print("[強硬派]")
    print("提案:", result_hardline["proposal"])
    print("根拠:", result_hardline["reasoning"])
    print("ログ:")
    for line in result_hardline["log"]:
        print(" -", line)

    print("\n[妥協派]")
    print("提案:", result_moderate["proposal"])
    print("根拠:", result_moderate["reasoning"])
    print("ログ:")
    for line in result_moderate["log"]:
        print(" -", line)